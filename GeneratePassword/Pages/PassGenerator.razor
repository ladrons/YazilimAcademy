@page "/passwordGenerator"
@using System.Text

@inject NavigationManager Navigation
@inject IToastService ToastService

<div class="container">
    <div class="card mt-2">
        <div class="card-header" style="text-align:center">
            <h2>.NET Blazor Password Generator</h2>
        </div>

        <div class="card-body">
            <div class="input-group mb-3">
                <input @bind="password" readonly="readonly" type="text" class="form-control" />

                <button class="btn btn-outline-secondary" type="button">
                    📄 Copy
                </button>
                <button @onclick="GeneratePassword"
                        class="btn btn-outline-secondary" type="button">
                    🔄 Generate
                </button>
                <button @onclick="HandleSavePasswords"
                        class="btn btn-outline-secondary" type="button">
                    💾 Save
                </button>
            </div>

            <hr />

            <div class="d-flex justify-content-around">
                <div class="d-flex align-items-center">
                    <div>
                        <input @onchange="RangeChanged"
                               type="number" min="6" max="32" value="@passwordLength" class="form-control" style="max-width: 65px" />
                    </div>
                    <div class="ms-3">
                        <label for="customRange1">Password Lenght</label>
                        <input @oninput="RangeChanged"
                               type="range" min="6" max="32" value="@passwordLength" class="form-range" id="customRange1">
                    </div>
                </div>

                <div class="d-flex flex-column justify-content-center">
                    <div class="form-check mb-2">
                        <input @onchange="SetBasicLetters"
                               class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1">
                        <label class="form-check-label" for="flexRadioDefault1">
                            Easy to say
                        </label>
                    </div>
                    <div class="form-check mb-2">
                        <input @onchange="SetReadableCharacters"
                               class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault2">
                        <label class="form-check-label" for="flexRadioDefault2">
                            Easy to read
                        </label>
                    </div>
                    <div class="form-check mb-2">
                        <input @onchange="SetAllCharacters"
                               class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault2">
                        <label class="form-check-label" for="flexRadioDefault2">
                            All characters
                        </label>
                    </div>
                </div>

                <div class="d-flex flex-column">
                    <div class="form-check mb-3">
                        <input @bind="containsUppercase" @bind:after="GeneratePassword"
                               class="form-check-input" type="checkbox" value="" id="flexCheckDefault">
                        <label class="form-check-label" for="flexCheckDefault">
                            Uppercase
                        </label>
                    </div>
                    <div class="form-check mb-3">
                        <input @bind="containsLowercase" @bind:after="GeneratePassword"
                               class="form-check-input" type="checkbox" value="" id="flexCheckDefault">
                        <label class="form-check-label" for="flexCheckDefault">
                            Lowercase
                        </label>
                    </div>
                    <div class="form-check mb-3">
                        <input @bind="containsNumbers" @bind:after="GeneratePassword"
                               disabled="@disableNumbers"
                               class="form-check-input" type="checkbox" value="" id="flexCheckDefault">
                        <label class="form-check-label" for="flexCheckDefault">
                            Numbers
                        </label>
                    </div>
                    <div class="form-check mb-3">
                        <input @bind="containsSymbols" @bind:after="GeneratePassword"
                               disabled="@disableSymbols"
                               class="form-check-input" type="checkbox" value="" id="flexCheckDefault">
                        <label class="form-check-label" for="flexCheckDefault">
                            Symbols
                        </label>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card mt-5">
        <div class="card-header">
            <h4>💾 Save Passwords</h4>
        </div>

        <div class="card-body">
            <ul class="list-group">
                @foreach (string savePassword in savedPasswords.Reverse())
                {
                    <li class="list-group-item">@savePassword</li>
                }
            </ul>
        </div>
    </div>
</div>

@code {
    //Şifre oluşturmak için gereken Random değişkeni
    private static Random random = new Random();

    //Şifre oluşturmak için gereken StringBuilder değişkeni
    private static StringBuilder strBuilder = new StringBuilder();

    //Oluşturulan şifrenin tutulduğu değişken
    private string password = string.Empty;

    //Şifre uzunluğunu belirleyen değişken
    private int passwordLength = 24;

    //Kaydedilen şifrelerin tutulduğu liste
    private HashSet<string> savedPasswords = new();

    //Şifre oluştururken kullanılacak karakterlerin belirlendiği değişkenler
    private bool containsUppercase = true;
    private bool containsLowercase = false;
    private bool containsNumbers = false;
    private bool containsSymbols = false;

    //İlgili değişkenlerin disable edilip edilmeyeceğini belirleyen değişkenler
    private bool disableNumbers = false;
    private bool disableSymbols = false;

    //Kullanılacak karakterlerin belirlendiği değişkenler
    private const string lowercaseLetters = "abcdefghijklmnopqrstuvwxyz";
    private const string uppercaseLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private const string numbers = "0123456789";
    private const string symbols = "!@#$%&*()_+-={};:?";


    // Metodlar ve Eventler \\
    /// <summary>
    /// Bu metod sayesinde sayfa yüklendiğinde şifre oluşturulur.
    /// </summary>
    protected override void OnInitialized()
    {
        GeneratePassword();
    }

    /// <summary>
    /// Bu metod ilgili değişkenleri kontrol ederek belirli kurallara göre şifre oluşturur.
    /// </summary>
    private void GeneratePassword()
    {
        var validChars = new StringBuilder();

        if (containsLowercase)
            validChars.Append(lowercaseLetters);
        if (containsUppercase)
            validChars.Append(uppercaseLetters);
        if (containsNumbers)
            validChars.Append(numbers);
        if (containsSymbols)
            validChars.Append(symbols);

        strBuilder.Clear();

        if (containsLowercase != false || containsUppercase != false || containsNumbers != false || containsSymbols != false)
        {
            for (int i = 0; i < passwordLength; i++)
            {
                var randomIndex = random.Next(0, validChars.Length);
                strBuilder.Append(validChars[randomIndex]);
            }
            password = strBuilder.ToString();
        }
        else { password = "Lütfen en az 1 adet textbox seçiniz."; }
    }

    /// <summary>
    /// Oluşturulan şifreyi bir listeye kaydeder. Listede aynı değer varsa kayıt işlemi GERÇEKLEŞMEZ. Boş kayıt KABUL EDİLMEZ.
    /// </summary>
    private void HandleSavePasswords()
    {
        if (string.IsNullOrEmpty(password) || savedPasswords.Contains(password))
            return;

            savedPasswords.Add(password);

        ToastService.ShowSuccess("The selected password saved!");
    }

    /// <summary>
    /// Şifrenin söylenilebilecek seviyede oluşması için değerleri günceller. (Sayı ve sembol özellikleri kilitlenir)
    /// </summary>
    private void SetBasicLetters()
    {
        containsLowercase = true;
        containsUppercase = true;
        containsNumbers = false;
        containsSymbols = false;

        disableNumbers = true;
        disableSymbols = true;

        GeneratePassword();
    }

    /// <summary>
    /// Şifrenin okunabilecek seviyede oluşması için değerleri günceller.
    /// </summary>
    private void SetReadableCharacters()
    {
        containsLowercase = true;
        containsUppercase = true;
        containsNumbers = false;
        containsSymbols = false;

        disableNumbers = false;
        disableSymbols = false;

        GeneratePassword();
    }

    /// <summary>
    /// Bütün seçenekleri kullanarak şifre oluşturulması için değerleri günceller.
    /// </summary>
    private void SetAllCharacters()
    {
        containsLowercase = true;
        containsUppercase = true;
        containsNumbers = true;
        containsSymbols = true;

        disableNumbers = false;
        disableSymbols = false;

        GeneratePassword();
    }

    /// <summary>
    /// Will be updated later
    /// </summary>
    /// <param name="e"></param>
    private void RangeChanged(ChangeEventArgs e)
    {
        if (e.Value == null)
            return;

        passwordLength = Convert.ToInt32(e.Value);
        GeneratePassword();
    }
}