@page "/passwordGenerator"
@using System.Text

<div class="container">
    <div class="card mt-2">
        <div class="card-header" style="text-align:center">
            <h2>.NET Blazor Password Generator</h2>
        </div>

        <div class="card-body">
            <div class="input-group mb-3">
                <input @bind="password" readonly="readonly" type="text" class="form-control" />

                <button class="btn btn-outline-secondary" type="button">📄 Copy</button>
                <button @onclick="HandleGeneratePassword"
                        class="btn btn-outline-secondary" type="button">
                    🔄 Generate
                </button>
                <button @onclick="HandleSavePasswords"
                        class="btn btn-outline-secondary" type="button">
                    💾 Save
                </button>
            </div>

            <hr />

            <div class="d-flex justify-content-around">
                <div class="d-flex align-items-center">
                    <div>
                        <input type="number" min="6" max="32" value="@passwordLength" class="form-control" style="max-width: 65px" />
                    </div>
                    <div class="ms-3">
                        <label for="customRange1">Password Lenght</label>
                        <input @oninput="RangeChanged"
                               type="range" min="6" max="32" value="@passwordLength" class="form-range" id="customRange1">
                    </div>
                </div>

                <div class="d-flex flex-column justify-content-center">
                    <div class="form-check mb-2">
                        <input @onchange="RadioChanged"
                               class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1" value="option1">
                        <label class="form-check-label" for="flexRadioDefault1">
                            Easy to say
                        </label>
                    </div>
                    <div class="form-check mb-2">
                        <input @onchange="RadioChanged"
                               class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault2" value="option2">
                        <label class="form-check-label" for="flexRadioDefault2">
                            Easy to read
                        </label>
                    </div>
                    <div class="form-check mb-2">
                        <input @onchange="RadioChanged"
                               class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault2">
                        <label class="form-check-label" for="flexRadioDefault2">
                            All characters
                        </label>
                    </div>
                </div>

                <div class="d-flex flex-column">
                    <div class="form-check mb-3">
                        <input @onchange="@(() => UpdatePassCriteria("upper"))"
                               checked="@containsUppercase"
                               class="form-check-input" type="checkbox" value="" id="flexCheckDefault">
                        <label class="form-check-label" for="flexCheckDefault">
                            Uppercase
                        </label>
                    </div>
                    <div class="form-check mb-3">
                        <input @onchange="@(() => UpdatePassCriteria("lower"))"
                               checked="@containsLowercase"
                               class="form-check-input" type="checkbox" value="" id="flexCheckDefault">
                        <label class="form-check-label" for="flexCheckDefault">
                            Lowercase
                        </label>
                    </div>
                    <div class="form-check mb-3">
                        <input @onchange="@(() => UpdatePassCriteria("number"))"
                               disabled="@disableNumbers"
                               checked="@containsNumbers"
                               class="form-check-input" type="checkbox" value="" id="flexCheckDefault">
                        <label class="form-check-label" for="flexCheckDefault">
                            Numbers
                        </label>
                    </div>
                    <div class="form-check mb-3">
                        <input @onchange="@(() => UpdatePassCriteria("symbol"))"
                               disabled="@disableSymbols"
                               checked="@containsSymbols"
                               class="form-check-input" type="checkbox" value="" id="flexCheckDefault">
                        <label class="form-check-label" for="flexCheckDefault">
                            Symbols
                        </label>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card mt-5">
        <div class="card-header">
            <h4>💾 Save Passwords</h4>
        </div>

        <div class="card-body">
            <ul class="list-group">
                @foreach (string savePassword in savedPasswords)
                {
                    <li class="list-group-item">@savePassword</li>
                }
            </ul>
        </div>
    </div>
</div>

@code {
    private static Random random = new Random();
    private static StringBuilder strBuilder = new StringBuilder();

    private List<string> savedPasswords = new();

    private string password = string.Empty;
    private int passwordLength = 24;

    private bool containsUppercase = true;
    private bool containsLowercase = false;
    private bool containsNumbers = false;
    private bool containsSymbols = false;

    private bool disableNumbers = false;
    private bool disableSymbols = false;

    private const string lowercaseLetters = "abcdefghijklmnopqrstuvwxyz";
    private const string uppercaseLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    private const string numbers = "0123456789";
    private const string symbols = "!@#$%&*()_+-={};:?";

    private void HandleGeneratePassword()
    {
        var validChars = new StringBuilder();

        if (containsLowercase)
            validChars.Append(lowercaseLetters);
        if (containsUppercase)
            validChars.Append(uppercaseLetters);
        if (containsNumbers)
            validChars.Append(numbers);
        if (containsSymbols)
            validChars.Append(symbols);

        strBuilder.Clear();

        if (containsLowercase != false || containsUppercase != false || containsNumbers != false || containsSymbols != false)
        {
            for (int i = 0; i < passwordLength; i++)
            {
                var randomIndex = random.Next(0, validChars.Length);
                strBuilder.Append(validChars[randomIndex]);
            }
            password = strBuilder.ToString();
        }
        else { password = "Lütfen en az 1 adet textbox seçiniz."; }
    }

    private void HandleSavePasswords()
    {
        if (string.IsNullOrEmpty(password) || savedPasswords.Contains(password))
            return;

        savedPasswords.Insert(0, password);
    }

    private void UpdatePassCriteria(string criteria)
    {
        switch (criteria)
        {
            case "upper":
                containsUppercase = !containsUppercase;
                break;
            case "lower":
                containsLowercase = !containsLowercase;
                break;
            case "number":
                containsNumbers = !containsNumbers;
                break;
            case "symbol":
                containsSymbols = !containsSymbols;
                break;

            default:
                break;
        }
    }

    private void RadioChanged(ChangeEventArgs e)
    {
        string selectedOption = e.Value.ToString();

        switch (selectedOption)
        {
            case "option1":
                containsLowercase = true;
                containsUppercase = true;
                containsNumbers = false;
                containsSymbols = false;

                disableNumbers = true;
                disableSymbols = true;
                break;

            case "option2":
                disableNumbers = false;
                disableSymbols = false;
                break;

            default:
                disableNumbers = false;
                disableSymbols = false;

                containsLowercase = true;
                containsUppercase = true;
                containsNumbers = true;
                containsSymbols = true;
                break;
        }
    }

    private void RangeChanged(ChangeEventArgs e)
    {
        passwordLength = int.Parse(e.Value.ToString());
        HandleGeneratePassword();
    }
}
